[[plugins]]
  repo = 'Shougo/dein.vim'

[[plugins]]
repo = "neoclide/coc.nvim"
merged = 0
rev = "release"
hook_add = '''
set cmdheight=2
set shortmess+=c

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <C-d> for select selections ranges, needs server support, like: coc-tsserver, coc-python
" nmap <silent> <C-d> <Plug>(coc-range-select)
" xmap <silent> <C-d> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<tab>'

function! LinkRosCompileCommands()
python3 << PYTHON3
import vim, os, errno

def symlink_force(target, link_name):
    try:
        os.symlink(target, link_name)
    except OSError as e:
        if e.errno == errno.EEXIST:
            os.remove(link_name)
            os.symlink(target, link_name)
        else:
            raise e

try:
    import rospkg
    package = rospkg.get_package_name(vim.current.buffer.name)
    if package is not None:
        lisp_dir = os.environ["ROSLISP_PACKAGE_DIRECTORIES"]
        catkin_ws_path = lisp_dir.replace("/devel/share/common-lisp", "")
        compile_commands_path = "{}/build/{}".format(catkin_ws_path, package)
        symlink_force(compile_commands_path + "/compile_commands.json", rospkg.RosPack().get_path(package) + "/compile_commands.json")
except ImportError:
    vim.command('let s:rospkg_not_found = 1')

PYTHON3
endfunction

call LinkRosCompileCommands()
" let g:coc_global_extensions = ['coc-pyright', 'coc-git', 'coc-lists', 'coc-clangd', 'coc-toml', 'coc-tabnine']
let g:coc_global_extensions = ['coc-pyright', 'coc-git', 'coc-lists', 'coc-toml', 'coc-tabnine']
'''
[[plugins]]
  repo = 'neoclide/coc-tsserver'
  build = 'yarn install --frozen-lockfile'

[[plugins]]
  repo = 'Shougo/neoyank.vim'

[[plugins]]
  repo = 'scrooloose/nerdtree'

[[plugins]]
  repo = 'jistr/vim-nerdtree-tabs'
  hook_add = '''
    nnoremap <silent><C-e> :NERDTreeTabsToggle<CR>
  '''

[[plugins]]
  repo = 'tyru/caw.vim.git'
  hook_add = '''
    nmap <Leader>c <Plug>(caw:hatpos:toggle)
    vmap <Leader>c <Plug>(caw:hatpos:toggle)
  '''

[[plugins]]
  repo = 'tpope/vim-surround'

[[plugins]]
  repo = 'vim-airline/vim-airline'
  depends = ['vim-airline-themes']
  hook_add = '''
    let g:airline_solarized_bg='dark'
    let g:airline_theme='papercolor'
  '''

[[plugins]]
  repo = 'vim-airline/vim-airline-themes'

[[plugins]]
  # repo = 'jonathanfilip/vim-lucius'
  repo = 'maksimr/Lucius2'

[[plugins]]
repo = 'NLKNguyen/papercolor-theme'

[[plugins]]
  repo = 'caksoylar/vim-mysticaltutor'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
hook_add = '''
let g:fzf_layout = { 'left': '~50%' }
let g:fzf_layout = { 'window': '-tabnew' }
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }
let g:fzf_history_dir = '~/.local/share/fzf-history'
let g:fzf_buffers_jump = 1
let g:fzf_preview_window = ['right:50%', 'ctrl-/']

set rtp+=/bin/fzf
nnoremap <C-b> :Buffers<CR>
nnoremap <C-g> :Rg<Space>
nnoremap <leader><leader> :Commands<CR>
nnoremap <C-p> :Files<CR>
command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)
command! -bang -nargs=* Rg
\ call fzf#vim#grep(
\ 'rg --column --line-number --hidden --ignore-case --no-heading --color=always '.shellescape(<q-args>), 1,
\ <bang>0 ? fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'up:60%')
\ : fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:50%:hidden', '?'),
\ <bang>0)
command! -bang -nargs=* GGrep
  \ call fzf#vim#grep(
  \   'git grep --line-number '.shellescape(<q-args>), 0,
  \   { 'dir': systemlist('git rev-parse --show-toplevel')[0] }, <bang>0)
'''

[[plugins]]
repo = 'junegunn/fzf.vim'

[[plugins]]
repo = 'yuki-yano/fzf-preview.vim'
rev = 'release/rpc'

[[plugins]]
repo = 'taketwo/vim-ros'
hook_add = '''
let g:ros_make = 'current'
let g:ros_build_system = 'catkin-tools'
'''

[[plugins]]
repo = 'kana/vim-operator-replace.git'
depends = 'vim-operator-user'
hook_add = '''
map R  <Plug>(operator-replace)
'''

[[plugins]]
repo = 'kana/vim-operator-user.git'

[[plugins]]
repo = 'osyo-manga/vim-over'
hook_add = '''
nnoremap <silent> <Leader>m :OverCommandLine<CR>
nnoremap <silent> <Leader>s :OverCommandLine<CR>%s/<C-r><C-w>//g<Left><Left>
'''

[[plugins]]
repo = 'iberianpig/ranger-explorer.vim'
hook_add = '''
nnoremap <silent><Leader>rd :RangerOpenCurrentDir<CR>
" nnoremap <silent><Leader>f :RangerOpenProjectRootDir<CR>
'''

[[plugins]]
repo = 'mopp/layoutplugin.vim'

[[plugins]]
repo = 'vimlab/split-term.vim'
hook_add = '''
let g:disable_key_mappings=1
let g:split_term_default_shell = "zsh"
set splitright
tnoremap <silent> <ESC> <C-\><C-n>
'''

[[plugins]]
repo = 'mktk1117/toggle_term.vim'
hook_add = '''
nnoremap <C-t> :call toggle_term#MonkeyTerminalToggle()<cr>
tnoremap <C-t> <C-\><C-n>:call toggle_term#MonkeyTerminalToggle()<cr>
'''

[[plugins]]
repo = 'github/copilot.vim'
hook_add = '''
imap <silent><script><expr> <C-j> copilot#Accept('\<CR>')
" let g:copilot_no_tab_map = v:true
'''

[[plugins]]
repo = 'f-person/git-blame.nvim'
hook_add = '''
let g:gitblame_enabled = 0
let g:gitblame_message_template = '        <summary> • <date> • <author>'
let g:gitblame_date_format = '%r'
nnoremap <silent><Leader>g :GitBlameToggle<CR>
'''

[[plugins]]
repo = 'akinsho/toggleterm.nvim'
hook_add = '''
lua require("toggleterm").setup({start_in_insert = false })
lua Terminal=require('toggleterm.terminal').Terminal
lua lazygit = Terminal:new({ cmd = "lazygit", hidden = true, direction="float", dir = "git_dir"})

function! _lazygit_toggle()
  lua lazygit:toggle()
endfunction

" nnoremap <silent><C-t> :ToggleTerm direction=vertical size=135<CR>
nnoremap <silent><C-f> :2ToggleTerm direction=float<CR>
nnoremap <silent><space>g :lua lazygit:toggle()<CR>
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'

[[plugins]]
  repo = 'romgrk/barbar.nvim'
  depends = ['kyazdani42/nvim-web-devicons']
  hook_add = '''
  nnoremap <silent> <space>p    <Cmd>BufferPick<CR>
  nnoremap <silent> <Space>bb <Cmd>BufferOrderByBufferNumber<CR>
  nnoremap <silent> <Space>bd <Cmd>BufferOrderByDirectory<CR>
  nnoremap <silent> <Space>bl <Cmd>BufferOrderByLanguage<CR>
  nnoremap <silent> <Space>bw <Cmd>BufferOrderByWindowNumber<CR>
  nnoremap <silent> gT <Cmd>BufferPrevious<CR>
  nnoremap <silent> gt <Cmd>BufferNext<CR>
  let bufferline = get(g:, 'bufferline', {})
  let bufferline.icons = v:false
  let bufferline.icon_separator_active = '▎'
  let bufferline.icon_separator_inactive = '▎'
  let bufferline.icon_close_tab = 'x'
  let bufferline.icon_close_tab_modified = '●'
  let bufferline.icon_pinned = '車'
  '''

[[plugins]]
  repo = 'mfussenegger/nvim-dap'
  hook_add = '''
  nnoremap <silent> <F5> :DapContinue<CR>
  nnoremap <silent> <F9> :DapStepInto<CR>
  nnoremap <silent> <F10> :DapStepOver<CR>
  nnoremap <silent> <F12> :DapStepOut<CR>
  nnoremap <silent> <leader>dg :lua require("dapui").toggle()<CR>
  nnoremap <silent> <leader>b :lua require'dap'.toggle_breakpoint()<CR>
  nnoremap <silent> <leader>B :lua require("dap").set_breakpoint(nil, nil, vim.fn.input("Breakpoint condition: "))<CR>
  nnoremap <silent> <leader>dp :lua require("dap").set_breakpoint(nil, nil, vim.fn.input("Log point message: "))<CR>
  nnoremap <silent> <leader>dr :lua require'dap'.repl.open()<CR>
  nnoremap <silent> <leader>dl :lua require'dap'.run_last()<CR>
  nnoremap <silent> <Space>k :lua require("dapui").eval()<CR>
  '''

[[plugins]]
  repo = 'rcarriga/nvim-dap-ui'
  hook_add = '''
  lua require("dapui").setup()
  '''

[[plugins]]
  repo = 'mfussenegger/nvim-dap-python'
  hook_add = '''
    let g:python_path = system('which python3')
    lua require('dap-python').setup(python_path)
  '''
